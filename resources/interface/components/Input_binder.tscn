[gd_scene load_steps=2 format=3 uid="uid://1q22h2kjiuyd"]

[sub_resource type="GDScript" id="GDScript_agevp"]
script/source = "extends HBoxContainer

@export var action_name :String = \"left\"
@onready var button = $Button
@onready var label = $Label
func _ready() -> void:
	set_process_input(false)
	set_action_name()
	set_text_for_key()
	
func set_action_name():
	label.text = action_name
	
func set_text_for_key():
	var action_events = InputMap.action_get_events(action_name)
	if action_events == []:
		button.text = \"none\"
	else:
		button.text = action_events[0].as_text()

func _on_button_toggled(toggled_on: bool) -> void:
	if toggled_on:
		button.text = \"...\"
		set_process_input(toggled_on)
		
		for k in get_tree().get_nodes_in_group(\"key_bind\"):
			if k.action_name != action_name:
				k.button.toggle_mode = false
				k.set_process_input(false)
	else:
		for k in get_tree().get_nodes_in_group(\"key_bind\"):
			if k.action_name != action_name:
				k.button.toggle_mode = true
				k.set_process_input(false)
				
		set_text_for_key()
	
func _input(event: InputEvent) -> void:
	if event is InputEventKey or event is InputEventMouseButton:
		rebind_action_key(event)
		button.button_pressed = false
	
func rebind_action_key(event: InputEvent) -> void:
	InputMap.action_erase_events(action_name)
	InputMap.action_add_event(action_name,event)
	Util.cfg.updatebind(action_name,event)
	set_process_input(false)
	set_text_for_key()
	set_action_name()
"

[node name="Control" type="HBoxContainer" groups=["key_bind"]]
custom_minimum_size = Vector2(300, 20)
offset_right = 17.0
offset_bottom = 24.0
size_flags_horizontal = 3
script = SubResource("GDScript_agevp")

[node name="Label" type="Label" parent="."]
custom_minimum_size = Vector2(200, 0)
layout_mode = 2

[node name="Button" type="Button" parent="."]
custom_minimum_size = Vector2(100, 0)
layout_mode = 2
toggle_mode = true

[connection signal="toggled" from="Button" to="." method="_on_button_toggled"]
